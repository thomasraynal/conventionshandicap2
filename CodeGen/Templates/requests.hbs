{{#each paths}}
{{#each this}}

### FILE _Generated/Request/{{uppercase_first_letter this.operationId}}Request.generated.cs

using System;
using System.IO;
using System.Collections.Generic;
using System.Threading.Tasks;
using Nancy;
using SwaggerPlayground.Common;
using FluentValidation;

namespace {{ uppercase_first_letter @root.x-product.appName}}.{{uppercase_first_letter @root.x-product.appService}}
{
    public partial class {{uppercase_first_letter this.operationId}}Request
    {
{{#each this.parameters}}
      public {{#one_line}}{{> selectType }} {{uppercase_first_letter this.name}}{{/one_line}} {get; set; }
{{/each}}

      public override bool Equals(object obj)
        {
            return obj is {{uppercase_first_letter this.operationId}}Request && obj.GetHashCode() == GetHashCode();
        }

      public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = nameof({{uppercase_first_letter this.operationId}}Request).GetHashCode();
{{#each this.parameters}}
                if(default != {{uppercase_first_letter this.name}}) hashCode = (hashCode * 397) ^ {{uppercase_first_letter this.name}}.GetHashCode();
{{/each}}
                return hashCode;
            }
        }


    }

{{#each this.responses}}
{{#with_matching @key '400' . '401' . '402' . '403' . '404' . '405' . '406' . '407' . '408' . '409' . '410' .}}

public class HttpResponse{{uppercase_first_letter ../../this.operationId}}{{@key}}Exception : Exception, IHasHttpServiceError
{
    public HttpResponse{{uppercase_first_letter ../../this.operationId}}{{@key}}Exception()
        : base() { }

    public HttpResponse{{uppercase_first_letter ../../this.operationId}}{{@key}}Exception(string message)
        : base(message) { }

    public HttpResponse{{uppercase_first_letter ../../this.operationId}}{{@key}}Exception(string message, Exception innerException)
        : base(message, innerException) { }

    public HttpStatusCode HttpStatusCode => (HttpStatusCode){{@key}};

    public string Details => Message;
}
{{/with_matching}}
{{/each}}


    public class {{uppercase_first_letter this.operationId}}RequestValidator : AbstractValidator<{{uppercase_first_letter this.operationId}}Request>
    {
    public {{uppercase_first_letter this.operationId}}RequestValidator()
    {
    {{#each this.parameters}}
    {{#with_matching this.required 'true' . }}
    {{#if_equals this.type 'string'}}
    RuleFor(request => request.{{uppercase_first_letter this.name}}).NotNull().NotEmpty().WithMessage("{{uppercase_first_letter this.name}} is required");
    {{else}}
    RuleFor(request => request.{{uppercase_first_letter this.name}}).NotNull().WithMessage("{{uppercase_first_letter this.name}} is required");
    {{/if_equals}}
    {{/with_matching}}
    {{/each}}
    }
    }

    }
    {{/each}}
    {{/each}}
