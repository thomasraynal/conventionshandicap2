{{#if_not_empty paths}}

### FILE Controllers/_Generated/{{uppercase_first_letter x-product.appName}}ControllerBase.Generated.cs

using Anabasis.Api;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;
using {{uppercase_first_letter x-product.appNamespace}}.Model;

{{#each x-product.appUsings}}
using {{this}};
{{/each}}

namespace {{uppercase_first_letter x-product.appNamespace}}
{

public abstract partial class {{uppercase_first_letter x-product.appName}}ControllerBase:ControllerBase
{

{{#each paths}}
{{set 'path' @key}}
{{#each .}}
{{set 'httpMethod' @key}}


{{#each parameters}}
{{#if_equals in 'body'}}
{{set 'bodyParam' this}}
{{/if_equals}}
{{/each}}

/// <summary>
    /// {{summary}}
///</summary>

{{#each parameters}}
///
///<param name="{{name}}">
///{{description}}
///</param>
{{/each}}
{{#each responses}}
/// <response code="{{@key}}">{{{message}}}</response>
{{/each}}


[Route("{{get 'path'}}", Name = "{{uppercase_first_letter operationId}}")]
[Http{{uppercase_first_letter (get 'httpMethod')}}]
{{#if_not_empty 'x-authorize'}}{{#if_not_empty x-authorize.roles}}[Authorize(Roles = "{{x-authorize.roles}}")]{{else}}  {{#if_equals x-authorize 'true'}}[Authorize]{{/if_equals}}{{/if_not_empty}} {{/if_not_empty}}
{{#each responses}}
{{#one_line}}[SwaggerResponse({{@key}},
{{#if_not_empty schema}}type: typeof({{schema.x-refName}}),{{/if_not_empty}}
{{#if_not_empty content}}  {{#with content.[0]}}type: typeof({{>ConvertType [0].schema}}), {{/with}}{{/if_not_empty}}
Description = "{{message}}")]{{/one_line}}{{/each}}[ApiExplorerSettings(GroupName = "{{get 'path'}}")]
[SwaggerOperation("{{uppercase_first_letter operationId}}")]

public async Task<IActionResult>
    {{uppercase_first_letter operationId}}Async(
    {{#each parameters}}
    {{#if_equals in 'path'}} {{#if_not_empty 'schema'}} {{>ConvertType schema }} {{else}} {{>ConvertType}} {{/if_not_empty}} {{name}} {{/if_equals}}
    {{#if_equals in 'body'}}{{#if_not_empty 'schema'}} {{>ConvertType schema }} {{else}} {{>ConvertType}} {{/if_not_empty}} {{name}}{{/if_equals}}
    {{#if_equals in 'header'}}{{#if_not_empty 'schema'}} {{>ConvertType schema }} {{else}} {{>ConvertType}} {{/if_not_empty}} {{name}}{{/if_equals}}
    {{#if_equals in 'query'}}{{#if_not_empty 'schema'}} {{>ConvertType schema }} {{else}} {{>ConvertType}} {{/if_not_empty}} {{name}} {{/if_equals}}
    {{#unless @last}}, {{/unless}}{{/each}}
    {{#if_not_empty requestBody}}
    {{#if_not_empty parameters}},{{/if_not_empty}}
    {{#with requestBody.content.[0]}}
    {{>ConvertType [0].schema}} requestBody
    {{/with}}
    {{/if_not_empty}}
    )


    {
    var responseBuilder = await {{uppercase_first_letter operationId}}InternalAsync({{#each parameters}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});

    return responseBuilder.BuildResult();

    }

    protected virtual Task<{{uppercase_first_letter operationId}}ResponseBuilder>
        {{uppercase_first_letter operationId}}InternalAsync({{#each parameters}}{{#if_not_equals in 'body'}}{{#if_not_empty 'schema'}} {{>ConvertType schema }} {{else}} {{>ConvertType}} {{/if_not_empty}} {{name}}{{/if_not_equals}}{{#if_equals in 'body'}}{{schema.x-refName}} {{name}}{{/if_equals}}{{#unless @last}}, {{/unless}} {{/each}})
        {
        throw new NotImplementedException();
        }

        public partial class {{uppercase_first_letter operationId}}ResponseBuilder : ResponseBuilder<{{uppercase_first_letter operationId}}ResponseBuilder>
            {
            [JsonConstructor]
            private {{uppercase_first_letter operationId}}ResponseBuilder() { }

            {{set 'operationId' operationId}}

            {{#each responses}}
     
            {{set 'code' @key}}

            {{#if_equals @index '0'}} public static {{uppercase_first_letter (get 'operationId')}}ResponseBuilder Build{{get 'code'}}
            ({{>GetResponseContent}})

            {
            return new {{uppercase_first_letter (get 'operationId')}}ResponseBuilder()
      
            .WithStatusCode({{@key}});
            } {{/if_equals}}

            {{#if_not_equals @index '0'}}{{#if_not_empty schema}}public static {{uppercase_first_letter (get 'operationId')}}ResponseBuilder Build{{@key}}({{>GetResponseContent}})
            {
            return new {{uppercase_first_letter (get 'operationId') }}ResponseBuilder()
           
            .WithStatusCode({{@key}});

            }{{/if_not_empty}}{{/if_not_equals}}

            {{#if_not_equals @index '0'}}public static {{uppercase_first_letter (get 'operationId') }}ResponseBuilder Build{{@key}}(string errorMessage = "{{{message}}}", Dictionary<string,object>
                arguments=null)
                {

                var content = new ErrorResponseMessage(new[] { new UserErrorMessage((HttpStatusCode){{@key}}, errorMessage, arguments) });

                return new {{uppercase_first_letter (get 'operationId') }}ResponseBuilder()
                .WithContent(content)
                .WithStatusCode({{@key}});
                }
                {{/if_not_equals}}

                {{#if_not_empty schema}}public static ErrorResponseMessage GetDefaultErrorResponseMessage{{@key}}(string errorMessage = "{{{message}}}", Dictionary<string,object>
                    arguments=null)
                    {   
                    return new ErrorResponseMessage(new[] { new UserErrorMessage((HttpStatusCode){{@key}}, errorMessage, arguments) });

                    }{{/if_not_empty}}
                    {{/each}}
                    }
                    {{/each}}
                    {{/each}}

                    }
                    }

                    {{/if_not_empty}}
